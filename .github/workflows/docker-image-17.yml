name: Java 17 Docker image

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

env:
  SRC_JAVA_17_ARM_32: 'https://cdn.azul.com/zulu-embedded/bin/zulu17.38.21-ca-jre17.0.5-linux_aarch32hf.tar.gz'
  SRC_JAVA_17_ARM_64: 'https://cdn.azul.com/zulu/bin/zulu17.40.19-ca-jdk17.0.6-linux_aarch64.tar.gz'
  SRC_JAVA_17_x64: 'https://cdn.azul.com/zulu/bin/zulu17.38.21-ca-jre17.0.5-linux_x64.tar.gz'

  CACHE_BASE: '@CacheJ17All'

  CACHE_JAVA_17_ARM_32: 'j17a32'
  CACHE_JAVA_17_ARM_64: 'j17a64'
  CACHE_JAVA_17_x64: 'j17x64'

  DKR_FILE: 'Dockerfile-j17'


jobs:
  arm32_dependency:
    name: "ARM 32 Dependency"
    runs-on: ubuntu-latest
    steps:
      - name: Check if cache exists
        id: cache-check
        uses: actions/cache@v2.1.8
        with:
          path: archive/ # download the artifact directly into the static folder
          key: ${{ runner.os }}-cache-${{ env.CACHE_BASE }}-${{ env.CACHE_JAVA_17_ARM_32 }}
          restore-keys: ${{ runner.os }}-cache-${{ env.CACHE_BASE }}-${{ env.CACHE_JAVA_17_ARM_32 }}
          
      - name: Validate Cache
        id: cache-validation
        run: |
          if [ -s "archive/arch" ] && [ "${{ steps.cache-check.outputs.cache-hit }}" == 'true' ]
          then
            echo "true"
            echo "arm32_cache=true" >> $GITHUB_ENV
          else
            echo "false"
            echo "arm32_cache=false" >> $GITHUB_ENV
          fi
        env:
          arm32_cache: ${{ steps.cache-validation.outputs.arm32_cache }}


      - name: Download Java
        if: env.arm32_cache != 'true'
        run: |
          wget -O java17.tar.gz ${{ env.SRC_JAVA_17_ARM_32 }}
          mkdir archive/
          ls -la
          tar -xzf java17.tar.gz --strip-components=1 -C archive/
          echo "armv7" > archive/arch
          ls -la archive

  arm64_dependency:
    name: "ARM 64 Dependency"
    runs-on: ubuntu-latest
    steps:
      - name: Check if cache exists
        id: cache-check
        uses: actions/cache@v2.1.8
        with:
          key: ${{ runner.os }}-cache-${{ env.CACHE_BASE }}-${{ env.CACHE_JAVA_17_ARM_64 }}   
          path: archive/ # download the artifact directly into the static folder
          restore-keys: ${{ runner.os }}-cache-${{ env.CACHE_BASE }}-${{ env.CACHE_JAVA_17_ARM_64 }}   
          
      - name: Validate Cache
        id: cache-validation
        run: |
          if [ -s "archive/arch" ] && [ "${{ steps.cache-check.outputs.cache-hit }}" == 'true' ]
          then
            echo "true"
            echo "arm64_cache=true" >> $GITHUB_ENV
          else
            echo "false"
            echo "arm64_cache=false" >> $GITHUB_ENV
          fi
        env:
          arm64_cache: ${{ steps.cache-validation.outputs.arm64_cache }}

      - name: Download Java
        if: env.arm64_cache != 'true'
        run: |
          wget -O java17.tar.gz ${{ env.SRC_JAVA_17_ARM_64 }}
          mkdir archive/
          ls -la
          tar -xzf java17.tar.gz --strip-components=1 -C archive/
          echo "aarch64" > archive/arch
          ls -la archive


  x64_dependency:
    name: "x64 Dependency"
    runs-on: ubuntu-latest
    steps:
      - name: Check if cache exists
        id: cache-check
        uses: actions/cache@v2.1.8
        with:
          path: archive/ # download the artifact directly into the static folder
          key: ${{ runner.os }}-cache-${{ env.CACHE_BASE }}-${{ env.CACHE_JAVA_17_x64 }}        
          restore-keys: ${{ runner.os }}-cache-${{ env.CACHE_BASE }}-${{ env.CACHE_JAVA_17_x64 }}   
          
      - name: Validate Cache
        id: cache-validation
        run: |
          if [ -s "archive/arch" ] && [ "${{ steps.cache-check.outputs.cache-hit }}" == 'true' ]
          then
            echo "true"
            echo "x64_cache=true" >> $GITHUB_ENV
          else
            echo "false"
            echo "x64_cache=false" >> $GITHUB_ENV
          fi
        env:
          x64_cache: ${{ steps.cache-validation.outputs.x64_cache }}

      - name: Download Java
        if: env.x64_cache != 'true'
        run: |
          wget -O java17.tar.gz ${{ env.SRC_JAVA_17_x64 }}
          mkdir archive/
          ls -la
          tar -xzf java17.tar.gz --strip-components=1 -C archive/
          echo "x64" > archive/arch
          ls -la archive


  dependencies:
    if: 1 == 0 # Always false, so job will be disabled
    runs-on: ubuntu-latest
    steps:

      - name: "Aquire Java 17 ARM 32"
        run: |
          wget -O java17.tar.gz ${{ env.SRC_JAVA_17_ARM_32 }}
          mkdir archive/
          ls -la
          tar -xzf java17.tar.gz --strip-components=1 -C archive/
          echo "armv7" > archive/arch

      - name: Upload Java 17 ARM 32
        uses: actions/upload-artifact@v3.1.1
        with:
          name: ${{ env.ART_JAVA_17_ARM_32 }}
          path: archive/*
          if-no-files-found: error

      - name: "Cleanup ARM 32"
        run: rm -rf archive


      - name: "Aquire Java 17 ARM 64"
        run: |
          wget -O java17.tar.gz ${{ env.SRC_JAVA_17_ARM_64 }}
          mkdir archive/
          ls -la
          tar -xzf java17.tar.gz --strip-components=1 -C archive/
          echo "aarch64" > ./archive/arch

      - name: Upload Java 17 ARM 64
        uses: actions/upload-artifact@v3.1.1
        with:
          name: ${{ env.ART_JAVA_17_ARM_64 }}
          path: ./archive/*
          if-no-files-found: error

      - name: "Cleanup ARM 64"
        run: rm -rf archive

      - name: "Aquire Java 17 x64"
        run: |
          wget -O java17.tar.gz ${{ env.SRC_JAVA_17_x64 }}
          mkdir archive/
          ls -la
          tar -xzf java17.tar.gz --strip-components=1 -C archive/
          echo "x64" > ./archive/arch

      - name: Upload Java 17 x64
        uses: actions/upload-artifact@v3.1.1
        with:
          name: ${{ env.ART_JAVA_17_x64 }}
          path: ./archive/*
          if-no-files-found: error
          
      - name: "Cleanup AMD x64"
        run: rm -rf archive


  Build_a32:
    name: "Build aarch 32"
    needs: arm32_dependency
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Fetching Java
        uses: actions/cache@v2.1.8
        with:
          key: ${{ runner.os }}-cache-${{ env.CACHE_BASE }}-${{ env.CACHE_JAVA_17_ARM_32 }}   
          restore-keys: ${{ runner.os }}-cache-${{ env.CACHE_BASE }}-${{ env.CACHE_JAVA_17_ARM_32 }}  
          path: archive/ # download the artifact directly into the static folder

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_HUB_NAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v2.5.0

      - name: Build and verify Docker image for ARM32
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: |
             bskjon/azuljava:latest-a32
             bskjon/azuljava:17-a32
          platforms: linux/arm/v7
          file: ${{ env.DKR_FILE }}

      - name: Verify Docker image for ARM32
        run: |
          docker images
          docker run --rm bskjon/azuljava:latest-a32 java --version

      - name: Tag Image
        if: ${{ success() }}
        run: |
          docker tag bskjon/azuljava:latest-a32 bskjon/azuljava:latest
          docker tag bskjon/azuljava:17-a32 bskjon/azuljava:17

      - name: Push Image
        if: ${{ success() }}
        run: |
          docker image push --all-tags bskjon/azuljava

      - name: Manifest
        run: |
          docker manifest create bskjon/azuljava:latest bskjon/azuljava:latest-a32 repository/image_name:latest-arm64

  Build_a64:
    name: "Build aarch 64"
    needs: arm64_dependency
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Fetching Java
        uses: actions/cache@v2.1.8
        with:
          key: ${{ runner.os }}-cache-${{ env.CACHE_BASE }}-${{ env.CACHE_JAVA_17_ARM_64 }}  
          restore-keys: ${{ runner.os }}-cache-${{ env.CACHE_BASE }}-${{ env.CACHE_JAVA_17_ARM_64 }}  
          path: archive/ # download the artifact directly into the static folder

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_HUB_NAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v2.5.0

      - name: Build and verify Docker image for ARM64
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: |
             bskjon/azuljava:latest-a64
             bskjon/azuljava:17-a64
          platforms: linux/arm64
          file: ${{ env.DKR_FILE }}

      - name: Verify Docker image for ARM64
        run: docker run --rm bskjon/azuljava:latest-a64 java --version

      - name: Tag Image
        if: ${{ success() }}
        run: |
          docker tag bskjon/azuljava:latest-a64 bskjon/azuljava:latest
          docker tag bskjon/azuljava:17-a64 bskjon/azuljava:17

      - name: Push Image
        if: ${{ success() }}
        run: |
          docker image push --all-tags bskjon/azuljava

  Build_x64:
    name: "Build x64"
    needs: x64_dependency
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Fetching Java
        uses: actions/cache@v2.1.8
        with:
          key: ${{ runner.os }}-cache-${{ env.CACHE_BASE }}-${{ env.CACHE_JAVA_17_x64 }}   
          #restore-keys: ${{ runner.os }}-cache-${{ env.CACHE_BASE }}-${{ env.CACHE_JAVA_17_x64 }}   
          path: archive/ # download the artifact directly into the static folder

      - name: ls
        run: | 
          pwd
          ls -la
          ls -la archive/

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_HUB_NAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v2.5.0

      - name: Build and verify Docker image for x64
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: |
             bskjon/azuljava:latest-x64
             bskjon/azuljava:17-x64
          platforms: linux/amd64
          file: ${{ env.DKR_FILE }}

      - name: Verify Docker image for x64
        run: docker run --rm bskjon/azuljava:latest-x64 java --version

      - name: Tag Image
        if: ${{ success() }}
        run: |
          docker tag bskjon/azuljava:latest-x64 bskjon/azuljava:latest
          docker tag bskjon/azuljava:17-x64 bskjon/azuljava:17
      - name: Push Image
        if: ${{ success() }}
        run: |
          docker image push --all-tags bskjon/azuljava

  Manifest:
    needs: [Build_a32, Build_a64, Build_x64]
    name: Manifest
    runs-on: ubuntu-latest
    steps:
      - name: Setup and Publish Manifest
        run: |
          docker manifest create bskjon/azuljava:latest \
           bskjon/azuljava:latest-x64 \
           bskjon/azuljava:latest-a64 \
           bskjon/azuljava:latest-a32

          docker manifest create bskjon/azuljava:17 \
           bskjon/azuljava:17-x64 \
           bskjon/azuljava:17-a64 \
           bskjon/azuljava:17-a32

          docker manifest annotate bskjon/azuljava:latest-a32 --os linux --arch arm --variant v7
          docker manifest annotate bskjon/azuljava:17-a32 --os linux --arch arm --variant v7

          docker manifest annotate bskjon/azuljava:latest-a64 --os linux --arch arm64
          docker manifest annotate bskjon/azuljava:17-a64 --os linux --arch arm64

          docker manifest push bskjon/azuljava:latest
          docker manifest push bskjon/azuljava:17

